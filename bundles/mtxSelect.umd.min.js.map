{"version":3,"sources":["ng://@ng-matero/extensions/select/templates.directive.ts","ng://@ng-matero/extensions/select/select.component.ts","ng://@ng-matero/extensions/select/select.module.ts"],"names":["MtxSelectOptionTemplateDirective","template","this","Directive","args","selector","TemplateRef","MtxSelectOptgroupTemplateDirective","MtxSelectLabelTemplateDirective","MtxSelectMultiLabelTemplateDirective","MtxSelectHeaderTemplateDirective","MtxSelectFooterTemplateDirective","MtxSelectNotFoundTemplateDirective","MtxSelectTypeToSearchTemplateDirective","MtxSelectLoadingTextTemplateDirective","MtxSelectTagTemplateDirective","MtxSelectLoadingSpinnerTemplateDirective","nextUniqueId","MtxSelectComponent","_focusMonitor","_elementRef","_changeDetectorRef","ngControl","_this","addTag","addTagText","appearance","closeOnSelect","clearAllText","clearable","clearOnBackspace","dropdownPosition","selectableGroup","selectableGroupAsModel","hideSelected","items","loading","loadingText","labelForId","markFirst","multiple","notFoundText","searchable","readonly","searchFn","searchWhileComposing","clearSearchOnAdd","selectOnTab","trackByFn","inputAttrs","openOnEnter","minTermLength","keyDownFn","_","virtualScroll","typeToSearchText","blur","EventEmitter","focus","change","open","close","search","clear","add","remove","scroll","scrollToEnd","_value","stateChanges","Subject","_uid","_focused","_required","_disabled","errorState","controlType","_onChange","_onTouched","monitor","subscribe","origin","next","valueAccessor","Object","defineProperty","prototype","newValue","_id","value","_placeholder","Array","isArray","length","focused","empty","coerceBooleanProperty","ngOnInit","ngDoCheck","invalid","touched","ngOnDestroy","complete","stopMonitoring","setDescribedByIds","ids","_ariaDescribedby","join","setDisabledState","isDisabled","disabled","onContainerClick","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","Component","exportAs","host","class","[class.mtx-select-floating]","[attr.id]","[attr.aria-describedby]","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","providers","provide","MatFormFieldControl","useExisting","FocusMonitor","ElementRef","ChangeDetectorRef","NgControl","decorators","type","Optional","Self","ContentChild","read","Input","Output","MtxSelectModule","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","NgSelectModule","exports","declarations"],"mappings":"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","sourcesContent":["import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({ selector: '[ng-option-tmp]' })\nexport class MtxSelectOptionTemplateDirective {\n  constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({ selector: '[ng-optgroup-tmp]' })\nexport class MtxSelectOptgroupTemplateDirective {\n  constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({ selector: '[ng-label-tmp]' })\nexport class MtxSelectLabelTemplateDirective {\n  constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({ selector: '[ng-multi-label-tmp]' })\nexport class MtxSelectMultiLabelTemplateDirective {\n  constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({ selector: '[ng-header-tmp]' })\nexport class MtxSelectHeaderTemplateDirective {\n  constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({ selector: '[ng-footer-tmp]' })\nexport class MtxSelectFooterTemplateDirective {\n  constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({ selector: '[ng-notfound-tmp]' })\nexport class MtxSelectNotFoundTemplateDirective {\n  constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({ selector: '[ng-typetosearch-tmp]' })\nexport class MtxSelectTypeToSearchTemplateDirective {\n  constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({ selector: '[ng-loadingtext-tmp]' })\nexport class MtxSelectLoadingTextTemplateDirective {\n  constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({ selector: '[ng-tag-tmp]' })\nexport class MtxSelectTagTemplateDirective {\n  constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({ selector: '[ng-loadingspinner-tmp]' })\nexport class MtxSelectLoadingSpinnerTemplateDirective {\n  constructor(public template: TemplateRef<any>) { }\n}\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  DoCheck,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  ChangeDetectorRef,\n  Optional,\n  Self,\n  Output,\n  EventEmitter,\n  TemplateRef,\n  ContentChild,\n} from '@angular/core';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Subject } from 'rxjs';\n\nimport {\n  MtxSelectOptionTemplateDirective,\n  MtxSelectLabelTemplateDirective,\n  MtxSelectHeaderTemplateDirective,\n  MtxSelectFooterTemplateDirective,\n  MtxSelectOptgroupTemplateDirective,\n  MtxSelectNotFoundTemplateDirective,\n  MtxSelectTypeToSearchTemplateDirective,\n  MtxSelectLoadingTextTemplateDirective,\n  MtxSelectMultiLabelTemplateDirective,\n  MtxSelectTagTemplateDirective,\n  MtxSelectLoadingSpinnerTemplateDirective\n} from './templates.directive';\n\nexport type CompareWithFn = (a: any, b: any) => boolean;\nexport type GroupValueFn = (key: string | object, children: any[]) => string | object;\n\nlet nextUniqueId = 0;\n\n@Component({\n  selector: 'mtx-select',\n  exportAs: 'mtxSelect',\n  host: {\n    'class': 'mtx-select',\n    '[class.mtx-select-floating]': 'shouldLabelFloat',\n    '[attr.id]': 'id',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n  },\n  templateUrl: './select.component.html',\n  styleUrls: ['./select.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{ provide: MatFormFieldControl, useExisting: MtxSelectComponent }],\n})\nexport class MtxSelectComponent\n  implements OnInit, OnDestroy, DoCheck, ControlValueAccessor, MatFormFieldControl<any> {\n  // MtxSelect custom templates\n  @ContentChild(MtxSelectOptionTemplateDirective, { read: TemplateRef }) optionTemplate: TemplateRef<any>;\n  @ContentChild(MtxSelectOptgroupTemplateDirective, { read: TemplateRef }) optgroupTemplate: TemplateRef<any>;\n  @ContentChild(MtxSelectLabelTemplateDirective, { read: TemplateRef }) labelTemplate: TemplateRef<any>;\n  @ContentChild(MtxSelectMultiLabelTemplateDirective, { read: TemplateRef }) multiLabelTemplate: TemplateRef<any>;\n  @ContentChild(MtxSelectHeaderTemplateDirective, { read: TemplateRef }) headerTemplate: TemplateRef<any>;\n  @ContentChild(MtxSelectFooterTemplateDirective, { read: TemplateRef }) footerTemplate: TemplateRef<any>;\n  @ContentChild(MtxSelectNotFoundTemplateDirective, { read: TemplateRef }) notFoundTemplate: TemplateRef<any>;\n  @ContentChild(MtxSelectTypeToSearchTemplateDirective, { read: TemplateRef }) typeToSearchTemplate: TemplateRef<any>;\n  @ContentChild(MtxSelectLoadingTextTemplateDirective, { read: TemplateRef }) loadingTextTemplate: TemplateRef<any>;\n  @ContentChild(MtxSelectTagTemplateDirective, { read: TemplateRef }) tagTemplate: TemplateRef<any>;\n  @ContentChild(MtxSelectLoadingSpinnerTemplateDirective, { read: TemplateRef }) loadingSpinnerTemplate: TemplateRef<any>;\n\n  /** MtxSelect options */\n  @Input() addTag: boolean | ((term: string) => any | Promise<any>) = false;\n  @Input() addTagText = 'Add item';\n  @Input() appearance = 'underline';\n  @Input() appendTo: string;\n  @Input() bindLabel: string;\n  @Input() bindValue: string;\n  @Input() closeOnSelect = true;\n  @Input() clearAllText = 'Clear all';\n  @Input() clearable = true;\n  @Input() clearOnBackspace = true;\n  @Input() compareWith: CompareWithFn; // TODO:\n  @Input() dropdownPosition: 'bottom' | 'top' | 'auto' = 'auto';\n  @Input() groupBy: () => void | string;\n  @Input() groupValue: GroupValueFn;\n  @Input() selectableGroup = false;\n  @Input() selectableGroupAsModel = true;\n  @Input() hideSelected = false;\n  @Input() items = [];\n  @Input() isOpen: boolean;\n  @Input() loading = false;\n  @Input() loadingText = 'Loading...';\n  @Input() labelForId = null;\n  @Input() markFirst = true;\n  @Input() maxSelectedItems: number;\n  @Input() multiple = false;\n  @Input() notFoundText = 'No items found';\n  @Input() searchable = true;\n  @Input() readonly = false;\n  @Input() searchFn = null;\n  @Input() searchWhileComposing = true;\n  @Input() clearSearchOnAdd = true;\n  @Input() selectOnTab = false;\n  @Input() trackByFn = null;\n  @Input() inputAttrs: { [key: string]: string } = {};\n  @Input() tabIndex: number;\n  @Input() openOnEnter = true;\n  @Input() minTermLength = 0;\n  @Input() keyDownFn = (_: KeyboardEvent) => true;\n  @Input() virtualScroll = false;\n  @Input() typeToSearchText = 'Type to search';\n  @Input() typeahead: Subject<string>;\n\n  @Output() blur = new EventEmitter();\n  @Output() focus = new EventEmitter();\n  @Output() change = new EventEmitter();\n  @Output() open = new EventEmitter();\n  @Output() close = new EventEmitter();\n  @Output() search = new EventEmitter<{ term: string; items: any[] }>();\n  @Output() clear = new EventEmitter();\n  @Output() add = new EventEmitter();\n  @Output() remove = new EventEmitter();\n  @Output() scroll = new EventEmitter<{ start: number; end: number }>();\n  @Output() scrollToEnd = new EventEmitter();\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    this._value = newValue;\n    this._onChange(newValue);\n    this.stateChanges.next();\n  }\n  private _value = null;\n\n  /** Implemented as part of MatFormFieldControl. */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Unique id for this input. */\n  private _uid = `mtx-select-${nextUniqueId++}`;\n\n  /** Placeholder to be shown if value is empty. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  private _placeholder: string;\n\n  /** Whether the input is focused. */\n  get focused(): boolean { return this._focused; }\n  private _focused = false;\n\n  get empty(): boolean {\n    return !this.value || (Array.isArray(this.value) && this.value.length === 0);\n  }\n\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  private _required = false;\n\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this.readonly = this._disabled;\n    this.stateChanges.next();\n  }\n  private _disabled = false;\n\n  errorState = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mtx-select';\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => { };\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => { };\n\n  constructor(\n    private _focusMonitor: FocusMonitor,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Self() public ngControl: NgControl\n  ) {\n    _focusMonitor.monitor(_elementRef, true).subscribe(origin => {\n      if (this._focused && !origin) {\n        this._onTouched();\n      }\n      this._focused = !!origin;\n      this.stateChanges.next();\n    });\n\n    if (this.ngControl != null) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngOnInit() { }\n\n  ngDoCheck(): void {\n    if (this.ngControl) {\n      this.errorState = this.ngControl.invalid && this.ngControl.touched;\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Implemented as part of MatFormFieldControl. */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /** Implemented as part of MatFormFieldControl. */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of MatFormFieldControl. */\n  onContainerClick() { }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    this._value = value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { NgSelectModule } from '@ng-select/ng-select';\n\nimport { MtxSelectComponent } from './select.component';\nimport {\n  MtxSelectFooterTemplateDirective,\n  MtxSelectHeaderTemplateDirective,\n  MtxSelectLabelTemplateDirective,\n  MtxSelectLoadingSpinnerTemplateDirective,\n  MtxSelectLoadingTextTemplateDirective,\n  MtxSelectMultiLabelTemplateDirective,\n  MtxSelectNotFoundTemplateDirective,\n  MtxSelectOptgroupTemplateDirective,\n  MtxSelectOptionTemplateDirective,\n  MtxSelectTagTemplateDirective,\n  MtxSelectTypeToSearchTemplateDirective\n} from './templates.directive';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, ReactiveFormsModule, NgSelectModule],\n  exports: [\n    MtxSelectComponent,\n    MtxSelectOptgroupTemplateDirective,\n    MtxSelectOptionTemplateDirective,\n    MtxSelectLabelTemplateDirective,\n    MtxSelectMultiLabelTemplateDirective,\n    MtxSelectHeaderTemplateDirective,\n    MtxSelectFooterTemplateDirective,\n    MtxSelectNotFoundTemplateDirective,\n    MtxSelectTypeToSearchTemplateDirective,\n    MtxSelectLoadingTextTemplateDirective,\n    MtxSelectTagTemplateDirective,\n    MtxSelectLoadingSpinnerTemplateDirective\n  ],\n  declarations: [\n    MtxSelectComponent,\n    MtxSelectOptgroupTemplateDirective,\n    MtxSelectOptionTemplateDirective,\n    MtxSelectLabelTemplateDirective,\n    MtxSelectMultiLabelTemplateDirective,\n    MtxSelectHeaderTemplateDirective,\n    MtxSelectFooterTemplateDirective,\n    MtxSelectNotFoundTemplateDirective,\n    MtxSelectTypeToSearchTemplateDirective,\n    MtxSelectLoadingTextTemplateDirective,\n    MtxSelectTagTemplateDirective,\n    MtxSelectLoadingSpinnerTemplateDirective,\n  ],\n})\nexport class MtxSelectModule { }\n"]}