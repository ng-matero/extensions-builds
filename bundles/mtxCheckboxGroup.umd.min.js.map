{"version":3,"sources":["ng://@ng-matero/extensions/checkbox-group/checkbox-group.component.ts","ng://@ng-matero/extensions/checkbox-group/checkbox-group.module.ts"],"names":["MtxCheckboxGroupComponent","_changeDetectorRef","this","selectAllLabel","showSelectAll","change","EventEmitter","selectAll","selectAllIndeterminate","options","onChange","onTouched","prototype","ngOnInit","writeValue","value","updateSingleChecked","markForCheck","registerOnChange","fn","registerOnTouched","e","index","filter","item","checked","disabled","every","emit","model","updateAllChecked","forEach","Component","args","selector","exportAs","host","class","template","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","ChangeDetectorRef","Input","Output","MtxCheckboxGroupModule","NgModule","imports","CommonModule","FormsModule","MatCheckboxModule","exports","declarations"],"mappings":"+nBAkDE,SAAAA,EAAoBC,GAAAC,KAAAD,mBAAAA,EAhBXC,KAAAC,eAAiB,aACjBD,KAAAE,eAAgB,EAEfF,KAAAG,OAAS,IAAIC,EAAAA,aAKvBJ,KAAAK,WAAY,EACZL,KAAAM,wBAAyB,EAEzBN,KAAAO,QAAoC,GAEpCP,KAAAQ,SAAQ,WAAoD,OAAA,MAC5DR,KAAAS,UAAS,WAAqB,OAAA,MA2DhC,OAvDEX,EAAAY,UAAAC,SAAA,aAEAb,EAAAY,UAAAE,WAAA,SAAWC,GACTb,KAAKO,QAAUM,EACXb,KAAKO,SACPP,KAAKc,sBAEPd,KAAKD,mBAAmBgB,gBAG1BjB,EAAAY,UAAAM,iBAAA,SAAiBC,GACfjB,KAAKQ,SAAWS,GAGlBnB,EAAAY,UAAAQ,kBAAA,SAAkBD,GAChBjB,KAAKS,UAAYQ,GAGnBnB,EAAAY,UAAAI,oBAAA,SAAoBK,EAAaC,GAC3BpB,KAAKO,QAAQc,QAAM,SAACC,GAAQ,OAAAA,EAAKC,UAAYD,EAAKE,YAAUC,OAAK,SAACH,GAAQ,OAACA,EAAKC,YAClFvB,KAAKK,WAAY,EACjBL,KAAKM,wBAAyB,GAE9BN,KAAKO,QAAQc,QAAM,SAACC,GAAQ,OAAAA,EAAKC,UAAYD,EAAKE,YAAUC,OAAK,SAACH,GAAQ,OAAAA,EAAKC,YAE/EvB,KAAKK,WAAY,EACjBL,KAAKM,wBAAyB,GAE9BN,KAAKM,wBAAyB,EAGhCN,KAAKG,OAAOuB,KAAK,CACfC,MAAO3B,KAAKO,QACZa,MAAKA,KAITtB,EAAAY,UAAAkB,iBAAA,SAAiBT,EAAaC,GAC5BpB,KAAKK,WAAaL,KAAKK,UACvBL,KAAKM,wBAAyB,EAC1BN,KAAKK,UACPL,KAAKO,QACFc,QAAM,SAACC,GAAQ,OAAAA,EAAKC,UAAYD,EAAKE,YACrCK,SAAO,SAACP,GAAQ,OAACA,EAAKC,SAAU,KAEnCvB,KAAKO,QACFc,QAAM,SAACC,GAAQ,OAAAA,EAAKC,UAAYD,EAAKE,YACrCK,SAAO,SAACP,GAAQ,OAACA,EAAKC,UAAYD,EAAKE,YAG5CxB,KAAKG,OAAOuB,KAAK,CACfC,MAAO3B,KAAKO,QACZa,MAAKA,yBAzFVU,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,qBACVC,SAAU,mBACVC,KAAM,CACJC,MAAO,sBAETC,SAAA,gjBAEAC,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzCC,UAAW,CACT,CACEC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,YAAU,WAAO,OAAAjD,KAC9BkD,OAAO,kOArBXC,EAAAA,6DA0BCC,EAAAA,6BACAA,EAAAA,sBAEAC,EAAAA,UAsEHrD,sBCpGA,SAAAsD,KAKsC,2BALrCC,EAAAA,SAAQtB,KAAA,CAAC,CACRuB,QAAS,CAACC,EAAAA,aAAcC,EAAAA,YAAaC,EAAAA,mBACrCC,QAAS,CAAC5D,GACV6D,aAAc,CAAC7D,OAEqBsD","sourcesContent":["import {\n  Component,\n  OnInit,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n  forwardRef,\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nimport { MtxCheckboxGroupOption } from './checkbox-group.interface';\n\n@Component({\n  selector: 'mtx-checkbox-group',\n  exportAs: 'mtxCheckboxGroup',\n  host: {\n    class: 'mtx-checkbox-group'\n  },\n  templateUrl: './checkbox-group.component.html',\n  styleUrls: ['./checkbox-group.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MtxCheckboxGroupComponent),\n      multi: true,\n    },\n  ],\n})\nexport class MtxCheckboxGroupComponent implements OnInit, ControlValueAccessor {\n  @Input() selectAllLabel = 'Select All';\n  @Input() showSelectAll = true;\n\n  @Output() change = new EventEmitter<{\n    model: MtxCheckboxGroupOption[];\n    index: number;\n  }>();\n\n  selectAll = false;\n  selectAllIndeterminate = false;\n\n  options: MtxCheckboxGroupOption[] = [];\n\n  onChange: (value: MtxCheckboxGroupOption[]) => void = () => null;\n  onTouched: () => void = () => null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) { }\n\n  ngOnInit() { }\n\n  writeValue(value: MtxCheckboxGroupOption[]): void {\n    this.options = value;\n    if (this.options) {\n      this.updateSingleChecked();\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  registerOnChange(fn: (value: MtxCheckboxGroupOption[]) => {}): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}): void {\n    this.onTouched = fn;\n  }\n\n  updateSingleChecked(e?: boolean, index?: number): void {\n    if (this.options.filter(item => item.checked || !item.disabled).every(item => !item.checked)) {\n      this.selectAll = false;\n      this.selectAllIndeterminate = false;\n    } else if (\n      this.options.filter(item => item.checked || !item.disabled).every(item => item.checked)\n    ) {\n      this.selectAll = true;\n      this.selectAllIndeterminate = false;\n    } else {\n      this.selectAllIndeterminate = true;\n    }\n\n    this.change.emit({\n      model: this.options,\n      index,\n    });\n  }\n\n  updateAllChecked(e?: boolean, index?: number): void {\n    this.selectAll = !this.selectAll;\n    this.selectAllIndeterminate = false;\n    if (this.selectAll) {\n      this.options\n        .filter(item => item.checked || !item.disabled)\n        .forEach(item => (item.checked = true));\n    } else {\n      this.options\n        .filter(item => item.checked || !item.disabled)\n        .forEach(item => (item.checked = !!item.disabled));\n    }\n\n    this.change.emit({\n      model: this.options,\n      index,\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\n\nimport { MtxCheckboxGroupComponent } from './checkbox-group.component';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, MatCheckboxModule],\n  exports: [MtxCheckboxGroupComponent],\n  declarations: [MtxCheckboxGroupComponent],\n})\nexport class MtxCheckboxGroupModule { }\n"]}